// <auto-generated />
using System;
using FindHikingFellow.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FindHikingFellow.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240318160333_SeedMoreData")]
    partial class SeedMoreData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Destinations");

                    b.HasComment("Mountain or region that the tour moves through");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://webnews.bg/uploads/images/84/8784/228784/768x432.jpg?_=1460885734",
                            Name = "Pirin"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://novavarna.net/wp-content/uploads/2020/06/rila_maliovica-1280x720.jpg",
                            Name = "Rila"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://trud.bg/public/images/articles/2020-11/mountain-landscape-beautiful-hd-wallpaper-1024x640_1509577115668281610_original.jpg",
                            Name = "Balkan Mauntains"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://bulgariawalking.com/wp-content/uploads/2016/10/rhodopes-and-rila-2.jpg",
                            Name = "Rodopi"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://media-cdn.tripadvisor.com/media/photo-s/1a/d2/6c/b8/caption.jpg",
                            Name = "Vithosha"
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasComment("Additional distinctive feature of the tour");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hut"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Forest"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lake"
                        },
                        new
                        {
                            Id = 4,
                            Name = "River"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Waterfall"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cave"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dog friendly"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kid friendly"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Camping possibility"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Rock climbing"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Via ferrata"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ecotrail"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Beach"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Views"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Historic site"
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TourId");

                    b.ToTable("FeedBacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityType = 1,
                            AuthorId = "9baea4e0-3afa-4b47-80d3-cfcd4b43e79b",
                            CreatedOn = new DateTime(2023, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 5,
                            Review = "Amazing trail. It had snowed the day before and it looked like a winter wonderland. Towards the end, follow the other mountaineers and don’t follow the all trails route. That being said, I didn’t have any snow spikes and the descent was SCARY. Managed to pull through. I even lost my phone on the trial, luckily I had my burner phone with my Bulgarian sim, which is why this journey starts halfway through. Anyway, it is so worth it. Get ready for an adventure almost 9,000 feet up in the Bulgarian mountains",
                            TourId = 2
                        },
                        new
                        {
                            Id = 2,
                            ActivityType = 4,
                            AuthorId = "480fd4fe-3c32-4626-8ea9-ada588d0d24f",
                            CreatedOn = new DateTime(2022, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 5,
                            Review = "",
                            TourId = 2
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Extension of the image file");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("TourId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.KeyPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("KeyPoints");

                    b.HasComment("Specific point or place that the tour moves through or near by");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Malyovitsa Hut"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vihren Hut"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Popovo Lake"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kazanite"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Koncheto Shelter"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Koncheto"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Vidimsko Praskalo Waterfall"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Yastrebets lift station"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Yontchevo Lake"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Elenino Lake"
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.PersonalList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("PersonalLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Favourite"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wish to perform"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Planned"
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElevationGain")
                        .HasColumnType("int")
                        .HasComment("The elevation gain in meters");

                    b.Property<double?>("Length")
                        .HasColumnType("float")
                        .HasComment("The length of the trail in km");

                    b.Property<string>("MeetingPoint")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The point where the participants are supposed to meet to begin tour");

                    b.Property<DateTime>("MeetingTime")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2")
                        .HasComment("The time whem the participants are supposed to meet to begin tour");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("OrganiserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RouteType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OrganiserId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityType = 1,
                            Description = "Let's enjoy together this trail near Bansko, Blagoevgrad. Generally considered a challenging route, this is a very popular area for hiking.",
                            DestinationId = 1,
                            Difficulty = 3,
                            Duration = "About 6 hours inlucding breaks for pictures and a lunch break",
                            ElevationGain = 931,
                            Length = 8.5,
                            MeetingPoint = "Vihren hut",
                            MeetingTime = new DateTime(2024, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vihren Peak",
                            OrganiserId = "9baea4e0-3afa-4b47-80d3-cfcd4b43e79b",
                            RouteType = 2
                        },
                        new
                        {
                            Id = 2,
                            ActivityType = 1,
                            Description = "Very scenic and beautiful hiking. Dramatic cliffs, lakes and stunning views from the summit. Big part of the trail is very rocky so use stable hiking shoes. It’s physically demanding but an amaizing one. There is lots of water so no need to bring extra.",
                            DestinationId = 2,
                            Difficulty = 3,
                            Duration = "About 7 hours inlucding breaks for pictures and a lunch break",
                            ElevationGain = 1017,
                            Length = 15.9,
                            MeetingPoint = "Malyovitsa hotel",
                            MeetingTime = new DateTime(2024, 7, 25, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malyovitsa Peak",
                            OrganiserId = "9baea4e0-3afa-4b47-80d3-cfcd4b43e79b",
                            RouteType = 2
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourFeature", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("TourFeatures");

                    b.HasData(
                        new
                        {
                            TourId = 2,
                            FeatureId = 1
                        },
                        new
                        {
                            TourId = 2,
                            FeatureId = 3
                        },
                        new
                        {
                            TourId = 2,
                            FeatureId = 14
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourKeyPoint", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("KeyPointId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "KeyPointId");

                    b.HasIndex("KeyPointId");

                    b.ToTable("TourKeyPoints");

                    b.HasData(
                        new
                        {
                            TourId = 2,
                            KeyPointId = 1
                        },
                        new
                        {
                            TourId = 2,
                            KeyPointId = 10
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourParticipant", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TourId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("TourParticipants");

                    b.HasData(
                        new
                        {
                            TourId = 2,
                            ParticipantId = "aec4bd2b-913c-425a-936f-8d2bd83c1164"
                        });
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourPersonalList", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalListId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "PersonalListId");

                    b.HasIndex("PersonalListId");

                    b.ToTable("TourPersonalLists");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            PersonalListId = 2
                        },
                        new
                        {
                            TourId = 2,
                            PersonalListId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9baea4e0-3afa-4b47-80d3-cfcd4b43e79b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cc6130c-ae64-423b-9b72-9a27440cb543",
                            Email = "organiser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ORGANISER@GMAIL.COM",
                            NormalizedUserName = "ORGANISER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJggYtpbhLl6vqAgPaa7BuslQgO7EmwHUBVcxy4TxH1EmRfQ6VN2s8LTkkfWde/Muw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5d3cb3e-61ab-418e-8ebd-bd6291596f53",
                            TwoFactorEnabled = false,
                            UserName = "Organiser"
                        },
                        new
                        {
                            Id = "aec4bd2b-913c-425a-936f-8d2bd83c1164",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03cc5945-035a-401f-b04d-e229183c3ab5",
                            Email = "participant1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARTICIPANT1@GMAIL.COM",
                            NormalizedUserName = "PARTICIPANT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7m9i8vrqH2c/HkjHkbuVgNVkfqryV9wL7QB/iVDSWd1R8bKBg+DvzMbL7ujgLPQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81edca4c-8841-4b25-ba6e-5dacd9ad1cd5",
                            TwoFactorEnabled = false,
                            UserName = "Participant1"
                        },
                        new
                        {
                            Id = "480fd4fe-3c32-4626-8ea9-ada588d0d24f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f956c1a-4afc-4775-bf9f-2dea1ea3abf8",
                            Email = "participant2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARTICIPANT2@GMAIL.COM",
                            NormalizedUserName = "PARTICIPANT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEP/ua1kvCZZHdgqYNIBxGjMvwOj8XuwDPCA7x+LL2qUsRO6EdRO3o7iKOS4AYccpgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2f94509-b6a8-4ce4-80fd-c39c6fbd7c9f",
                            TwoFactorEnabled = false,
                            UserName = "Participant2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.FeedBack", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Tour", "Tour")
                        .WithMany("FeedBacks")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Image", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Tour", "Tour")
                        .WithMany("Images")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Tour", b =>
                {
                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Destination", "Destination")
                        .WithMany("Tours")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Organiser")
                        .WithMany()
                        .HasForeignKey("OrganiserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Organiser");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourFeature", b =>
                {
                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Feature", "Feature")
                        .WithMany("Tours")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Tour", "Tour")
                        .WithMany("Features")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourKeyPoint", b =>
                {
                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.KeyPoint", "KeyPoint")
                        .WithMany("Tours")
                        .HasForeignKey("KeyPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Tour", "Tour")
                        .WithMany("KeyPoints")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KeyPoint");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourParticipant", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Tour", "Tour")
                        .WithMany("Participants")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.TourPersonalList", b =>
                {
                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.PersonalList", "PersonalList")
                        .WithMany("Tours")
                        .HasForeignKey("PersonalListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindHikingFellow.Infrastructure.Data.Models.Tour", "Tour")
                        .WithMany("PersonalLists")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalList");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Destination", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Feature", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.KeyPoint", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.PersonalList", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("FindHikingFellow.Infrastructure.Data.Models.Tour", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("FeedBacks");

                    b.Navigation("Images");

                    b.Navigation("KeyPoints");

                    b.Navigation("Participants");

                    b.Navigation("PersonalLists");
                });
#pragma warning restore 612, 618
        }
    }
}
